zato.channel.amqp.create
========================

Overview
------------

Allows one to create an AMQP channel basing on
:doc:`an already existing AMQP connection definition</public-api/details/zato.definition.amqp.create>`.

  * List response: No
  * SOAP action: zato.channel.amqp.create
  * SOAP URL path: /zato/soap
  * JSON URL path: /zato/json/zato.channel.amqp.create
  * WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

=================== ======== ======== ====================================================================================================================================================
Name                Datatype Optional Notes
=================== ======== ======== ====================================================================================================================================================
cluster_id          int      ---      ID of the cluster this channel should be created in
name                string   ---      Name of the channel to create
is_active           boolean  ---      Whether the channel should be active upon its creation
def_id              int      ---      ID of :doc:`an already existing AMQP connection definition</public-api/details/zato.definition.amqp.create>` to use for connecting to an AMQP broker
queue               string   ---      Name of the queue to read messages off
consumer_tag_prefix string   ---      AMQP consumer tag prefix, useful for identifying who connects to a given queue
service             string   ---      Name of an already existing service to invoke upon reading each message from the queue
data_format         string   Yes      Expected data format. If given, should be either 'xml' or 'json'.
=================== ======== ======== ====================================================================================================================================================
            

Response parameters
-------------------

======= ======== ======== ======================================================================================
Name    Datatype Optional Notes
======= ======== ======== ======================================================================================
id      int      ---      ID assigned to the newly created channel
name    string   ---      Copied over from request
======= ======== ======== ======================================================================================

SOAP example
------------

.. code-block:: xml

      <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
           xmlns:zato="http://gefira.pl/zato">
         <soapenv:Header/>
         <soapenv:Body>
            <zato:zato_get_foo_request>
              <zato:req_elem1>...</zato:req_elem1>
              <zato:req_elem2>...</zato:req_elem2>
              ...
              <zato:req_elem_n>...</zato:req_elem_n>
            </zato:zato_get_foo_request>
         </soapenv:Body>
      </soapenv:Envelope>
      
      <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
           xmlns="http://gefira.pl/zato">
         <soap:Body>
            <zato_get_foo_response>
               <zato_env>
                  <cid>K21353002988419985838198535608</cid>
                  <result>ZATO_OK</result>
               </zato_env>
               <item>
                  <resp_elem1>...</resp_elem1>
                  <resp_elem2>...</resp_elem2>
                  ...
                  <resp_elem_n>...</resp_elem_n>
               </item>
            </zato_get_foo_response>
         </soap:Body>
      </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
     "req_elem1":"...", 
     "req_elem2":"...", 
     ...
     "req_elem_n":"...", 
   }

   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K68938864847262437323255781583"
     },
     "zato_get_foo_response": {
       "resp_elem1": "...",
       "resp_elem2": "...",
       ...
       "resp_elem_n": "..."
     }
   }
