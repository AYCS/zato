zato.security.wss.Create
===============================

Overview
--------

Allows one to create a WS-Security definition. Its default password will
be a randomly generated UUID4, use :doc:`zato.security.wss.ChangePassword<./zato.security.wss.change-password>`
to change it.

* List response: No
* SOAP action: zato.security.wss.create
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.security.wss.create
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

======================== ======== ======== =================================================================
Name                     Datatype Optional Notes
======================== ======== ======== =================================================================
cluster_id               int      ---      ID of the cluster to create the definition in
name                     string   ---      Definition name
is_active                boolean  ---      Whether the definition should be active upon its creation
username                 string   ---      Username
password_type            string   ---      Same as for :doc:`zato.security.GetList<./zato.security.get-list>`
reject_empty_nonce_creat boolean  ---      〃
reject_stale_tokens      boolean  ---      〃
reject_expiry_limit      boolean  ---      〃
nonce_freshness_time     int      ---      〃
======================== ======== ======== =================================================================
            

Response parameters
-------------------

==== ======== ======== ===========================================
Name Datatype Optional Notes
==== ======== ======== ===========================================
id   int      ---      ID assigned to the newly created definition
name string   ---      Copied over from request
==== ======== ======== ===========================================


SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="http://gefira.pl/zato">
      <soapenv:Header/>
      <soapenv:Body>
         <zato:zato_security_wss_create_request>
            <zato:cluster_id>1</zato:cluster_id>
            <zato:name>CRM client 3</zato:name>
            <zato:is_active>true</zato:is_active>
            <zato:password_type>clear_text</zato:password_type>
            <zato:username>crm3</zato:username>
            <zato:reject_empty_nonce_creat>false</zato:reject_empty_nonce_creat>
            <zato:reject_stale_tokens>true</zato:reject_stale_tokens>
            <zato:reject_expiry_limit>3600</zato:reject_expiry_limit>
            <zato:nonce_freshness_time>3600</zato:nonce_freshness_time>
         </zato:zato_security_wss_create_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
      xmlns="http://gefira.pl/zato">
   <soap:Body>
       <zato_security_wss_create_response xmlns="http://gefira.pl/zato">
       <zato_env>
           <cid>K61845875257868933980352107032</cid>
           <result>ZATO_OK</result>
       </zato_env>
       <item>
           <id>9</id>
           <name>CRM Client 3</name>
       </item>
   </zato_security_wss_create_response>
   </soap:Body>
   </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
      "cluster_id": 1,
      "name": "CRM client 7",
      "is_active": true,
      "password_type": "clear_text",
      "username": "crm7",
      "reject_empty_nonce_creat": false,
      "reject_stale_tokens": true,
      "reject_expiry_limit": 3600,
      "nonce_freshness_time": 3600
   }

   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K65505595210936073302287666076"
     },
     "zato_security_wss_create_response": {
       "id": 11,
       "name": "CRM client 7"
     }
   }

