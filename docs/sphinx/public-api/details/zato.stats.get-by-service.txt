zato.stats.get-by-service
=========================

Overview
--------

Returns statistics of a service for a given period along with a trends
data broken down by each minute in that interval.

.. note::

  Depending on the number of services and amount of statistics existing the
  service may become very slow. It's best to limit the period to a short
  one, e.g. one hour. This is because the service will compute per-minute
  trends which is a rather costly operation.
  
  If zato.stats.get-by-service is too slow for you, consider using
  :doc:`zato.stats.get-summary-by-range <zato.stats.get-summary-by-range>`
  which is always fast across arbitrary intervals because it doesn't return trends.

* List response: No
* SOAP action: zato.stats.get-by-service
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.stats.get-by-service
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

========== ======== ======== =====================================================================
Name       Datatype Optional Notes
========== ======== ======== =====================================================================
start      dateTime ---      Start date and time
stop       dateTime ---      Stop date and time
service_id int      ---      ID of the service to return statistics of
n          int      Yes      If given, only top n statistics will be returned
n_type     int      Yes      Must be given if n is provided. Can be either:

                             * 'mean' - to return top n services whose mean response time was largest,
                               i.e., top n slowest services
                             * 'usage' - to return top n most commonly used services
========== ======== ======== =====================================================================
            

Response parameters
-------------------

service_name
usage
rate
time
usage_trend
mean_trend
min_resp_time
max_resp_time
all_services_usage
all_services_time
mean_all_services
usage_perc_all_services
time_perc_all_services

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="http://gefira.pl/zato">
      <soapenv:Header/>
      <soapenv:Body>
         <zato:zato_stats_get_by_service_request>
            <zato:start>2013-02-10T12:10:00</zato:start>
            <zato:stop>2013-02-10T12:35:00</zato:stop>
            <zato:service_id>261</zato:service_id>
         </zato:zato_stats_get_by_service_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
      xmlns="http://gefira.pl/zato">
   <soap:Body>
       <zato_stats_get_by_service_response xmlns="http://gefira.pl/zato">
       <zato_env>
           <cid>K32612201913736955550831318953</cid>
           <result>ZATO_OK</result>
       </zato_env>
       <item>
           <service_name>zato.Ping</service_name>
           <usage>16</usage>
           <mean>27.52</mean>
           <rate>0.01</rate>
           <time>3020.0</time>
           <usage_trend>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,12,1,0</usage_trend>
           <mean_trend>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,54,130,212,229,0</mean_trend>
           <min_resp_time>54.0</min_resp_time>
           <max_resp_time>252.0</max_resp_time>
       </item>
   </zato_stats_get_by_service_response>
   </soap:Body>
   </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
      "start": "2013-02-09T23:30:00",
      "stop": "2013-02-09T23:45:00"
   }

   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K72653045522169670137512962812"
     }
   }
