zato.outgoing.ftp.Create
========================

Overview
--------

Allows one to create an outgoing FTP connection. Note that it can be used for
creating connections to both FTP and FTPS (FTP Secure) servers.

  * List response: No
  * SOAP action: zato.outgoing.ftp.create
  * SOAP URL path: /zato/soap
  * JSON URL path: /zato/json/zato.outgoing.ftp.create
  * WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

========== ======== ======== =====================================================================================================================================================
Name       Datatype Optional Notes
========== ======== ======== =====================================================================================================================================================
cluster_id int      ---      ID of the cluster this outgoing connection should be created in
name       string   ---      Name of the outgoing connection to create
is_active  boolean  ---      Whether the outgoing connection should be active upon its creation. If true, the underlying connector will be started immediately after its creation.
host       string   ---      FTP host
port       int      ---      FTP port
dircache   boolean  ---      Whether the directory information should be cached
user       string   Yes      User to connect with
acct       string   Yes      Accounting information
timeout    int      Yes      Connection timeout in seconds
========== ======== ======== =====================================================================================================================================================
            

Response parameters
-------------------

==== ======== ======== ====================================================
Name Datatype Optional Notes
==== ======== ======== ====================================================
id   int      ---      ID assigned to the newly created outgoing connection
name string   ---      Copied over from request
==== ======== ======== ====================================================

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="http://gefira.pl/zato">
      <soapenv:Header/>
      <soapenv:Body>
         <zato:zato_outgoing_ftp_create_request>
            <zato:cluster_id>1</zato:cluster_id>
            <zato:name>Linux kernel</zato:name>
            <zato:is_active>true</zato:is_active>
            <zato:host>ftp.kernel.org</zato:host>
            <zato:port>21</zato:port>
            <zato:dircache>true</zato:dircache>
            <zato:user>anonymous</zato:user>
            <zato:timeout>5000</zato:timeout>
         </zato:zato_outgoing_ftp_create_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
      xmlns="http://gefira.pl/zato">
   <soap:Body>
       <zato_outgoing_ftp_create_response xmlns="http://gefira.pl/zato">
       <zato_env>
           <cid>K35285759534937514457741613131</cid>
           <result>ZATO_OK</result>
       </zato_env>
       <item>
           <id>1</id>
           <name>Linux kernel</name>
       </item>
   </zato_outgoing_ftp_create_response>
   </soap:Body>
   </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
      "cluster_id": 1,
      "name": "GnuPG DK",
      "is_active": true,
      "host": "ftp.gnupg.dk",
      "port": 21,
      "dircache": true,
      "user": "anonymous",
      "timeout": 2000
   }

   {
     "zato_outgoing_ftp_create_response": {
       "id": 5,
       "name": "GnuPG DK"
     },
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K37812410218544006835237745927"
     }
   }
